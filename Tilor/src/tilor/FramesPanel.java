/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tilor;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author seanlanghi
 */
public class FramesPanel extends javax.swing.JPanel
{
    
    /*
     *  Human-added fields.
     */
    
    private TilorDelegate delegate;
    
    // The sequence of icons that will be displayed in the panel.
    private ArrayList<JLabel> frames;
    
    // Resource paths are stored relative to this directory.
    // This field attempts to initialize with the home directory of Tilor.
    // It initializes with (null) if the attempt fails.
    private File homeDir;
    
    /*
     *  Human-added public instance methods.
     */
    
    public void setFramesWithFramepathList(ArrayList<String> framepaths)
    {
        // Wipe the "frames" ArrayList.
        frames.clear();
        
        // Prepare to make a frame icon for every framepath.
        frames.ensureCapacity(framepaths.size());
        
        String absPath;
        File imageFile;
        BufferedImage image;
        ImageIcon icon;
        JLabel frame;
        
        // Iterate through the argument, creating a frame icon for each path.
        for (String relPath : framepaths)
        {
            try
            {
                absPath = delegate.getAbsPathOfRelPath(relPath);
                imageFile = new File(absPath);
                image = ImageIO.read(imageFile);
                icon = new ImageIcon(image);
                frame = new JLabel(icon);
                frames.add(frame);
            }
            // If the selected file isn't an image...
            catch (IOException ex)
            {
                Logger.getLogger(FramesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    
        // Update the GUI so it displays the frames.
        renderFramesInGUI();
    }
    
    public void setHomeDir(File directory)
    {
        this.homeDir = directory;
        this.homeDirField.setText(directory.getAbsolutePath());
        
        // Just in case the user loaded a file before setting the home dir.
        // That possibility will not survive the next round of revisions, but it will have to do for now.
        renderFramesInGUI();
    }
    
    public File getHomeDir()
    {
        return homeDir;
    }
    
    public void setDelegate(TilorDelegate delegate)
    {
        this.delegate = delegate;
    }
    
    public TilorDelegate getDelegate()
    {
        return delegate;
    }
    
    /*
     *  Human-added private instance methods.
     */
    
    private void renderFramesInGUI()
    {
        framesPanel.removeAll();
        for (JLabel frame : frames)
        {
            framesPanel.add(frame);
        }
        framesPanel.updateUI();
    }
    
    // -------------------------------------------------------------------------------- //
    // -------------------- Auto-generated code areas begin here. --------------------- //
    // -------------------------------------------------------------------------------- //

    /**
     * Creates new form FramesPanel
     */
    public FramesPanel()
    {
        // Set the homeDir to Tilor's location, if possible.
        try
        {
            String pathToTilor = TilorWindow.class.getProtectionDomain().getCodeSource().getLocation().getPath();
            String decodedPath = URLDecoder.decode(pathToTilor, "UTF-8");
            this.homeDir = new File(decodedPath);
        }
        catch (Exception e)
        {
            this.homeDir = null;
        }
        
        initComponents();
        frames = new ArrayList<JLabel>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        framesPanelWrapper = new javax.swing.JScrollPane();
        framesPanel = new javax.swing.JPanel();
        framesLabel = new javax.swing.JLabel();
        homeDirLabel = new javax.swing.JLabel();
        homeDirField = new javax.swing.JTextField();
        homeDirChooseButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(100, 200, 100));

        framesPanel.setBackground(new java.awt.Color(235, 235, 235));
        framesPanel.setLayout(new java.awt.GridBagLayout());
        framesPanelWrapper.setViewportView(framesPanel);

        framesLabel.setText("Frames");

        homeDirLabel.setText("Tilor will parse resource paths relative to the following directory:");

        homeDirField.setEditable(false);
        homeDirField.setText("<not set>");

        homeDirChooseButton.setText("Choose...");
        homeDirChooseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                homeDirChooseButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(22, 22, 22)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(framesPanelWrapper, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 360, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(framesLabel)))
                    .add(layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(homeDirField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 255, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(homeDirChooseButton))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(homeDirLabel)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(8, 8, 8)
                .add(framesLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(framesPanelWrapper, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 243, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(homeDirLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(homeDirField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(homeDirChooseButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void homeDirChooseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_homeDirChooseButtonActionPerformed
    {//GEN-HEADEREND:event_homeDirChooseButtonActionPerformed
        // Create a file chooser that will let the user browse for a directory.
        JFileChooser chooser;
        if (homeDir != null)
            chooser = new JFileChooser(homeDir);
        else
            chooser = new JFileChooser();
        
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setFileFilter(new FileFilter()
        {
            public boolean accept(File f)
            {
                return (f.isDirectory());
            }

            public String getDescription()
            {
                return "Directories only";
            }
        });
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int browsingResult = chooser.showDialog(this, "Choose");
        if (browsingResult == JFileChooser.APPROVE_OPTION)
        {
            this.setHomeDir(chooser.getSelectedFile());
        }
    }//GEN-LAST:event_homeDirChooseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel framesLabel;
    private javax.swing.JPanel framesPanel;
    private javax.swing.JScrollPane framesPanelWrapper;
    private javax.swing.JButton homeDirChooseButton;
    private javax.swing.JTextField homeDirField;
    private javax.swing.JLabel homeDirLabel;
    // End of variables declaration//GEN-END:variables

}